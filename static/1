var map = (function() {
 var map;
 var service;
 var zoomLevel = 15;
 if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {
   zoomLevel = 15; 
 }

 function mapInitialize() {
   var mapOptions = {
     zoom: zoomLevel, 
     mapTypeId: google.maps.MapTypeId.ROADMAP
   };
   google.maps.visualRefresh = true;
   window.map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);
    map = window.map   
   // Try HTML5 geolocation
   if(navigator.geolocation) {
     navigator.geolocation.getCurrentPosition(function(position) {
     var pos = new google.maps.LatLng(position.coords.latitude,
                                       position.coords.longitude);
 
     var  infowindow = new google.maps.InfoWindow({
       map: map,
       position: pos,
       content: 'Location found using HTML5.'
     });

      map.setCenter(pos);

var marker = new google.maps.Marker({
    map: map
  });

     service = new google.maps.places.PlacesService(map);
   
var input = /** @type {HTMLInputElement} */(document.getElementById('searchTextField'));
  var autocomplete = new google.maps.places.Autocomplete(input);

  autocomplete.bindTo('bounds', map);

google.maps.event.addListener(autocomplete, 'place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    input.className = '';
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      // Inform the user that the place was not found and return.
      input.className = 'notfound';
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }
 infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
  });

// Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    google.maps.event.addDomListener(radioButton, 'click', function() {
      autocomplete.setTypes(types);
    });
  }

  setupClickListener('changetype-all', []);
  setupClickListener('changetype-establishment', ['establishment']);
  setupClickListener('changetype-geocode', ['geocode']);
   }, function() {
     handleNoGeolocation(true);
   });
  } else {
    // Browser doesn't support Geolocation
    handleNoGeolocation(false);
  } 
 }

 function handleInitialLocation(pos, msg) {
     var  infowindow = new google.maps.InfoWindow({
       map: map,
       position: pos,
       content: msg 
     });

     map.setCenter(pos);

     var request = {
       location: map.getCenter(),
       radius: '2000',
       query: 'paseo sandwiches'
     };

     service = new google.maps.places.PlacesService(map);
     service.textSearch(request, callback);    
 }


 function handleNoGeolocation(errorFlag) {
  var content;
  if (errorFlag) {
    content = 'Error: The Geolocation service failed.';
  } else {
    content = 'Error: Your browser doesn\'t support geolocation.';
  }
  
  var position = new google.maps.LatLng(47.6230308, -122.3274144); // default seattle
  handleInitialLocation(position, content);
}

function callback(results, status) {
  if (status == google.maps.places.PlacesServiceStatus.OK) {
    for (var i = 0; i < results.length; i++) {
      var place = results[i];
      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });
    }
  }
}

function getmap() {
  return map;
}
 google.maps.event.addDomListener(window, 'load',mapInitialize);
 return getmap;
})();
